//
//  ViewController.m
//  PenTestExtension
//
//  Created by Luidia on 2018. 05. 04..
//  Copyright © 2018년 Luidia. All rights reserved.
//

#import "ViewController.h"
#import "AppDelegate.h"

@implementation ViewController
@synthesize penController;
@synthesize sections;
@synthesize items;
@synthesize drawViewController;
@synthesize status, rawPt, convPt, pressure, temperature, aliveSec, smFlag;
@synthesize position, smProperties;
@synthesize penColor;
@synthesize bleSearchController;
@synthesize RSSIValue;

#define TARGET_LUIDIA_EBEAMMARKER 0

-(void) dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"PNF_LOG_MSG" object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"PNF_MSG" object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"BLE_SEARCH_DEVICE_NAME" object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"PNF_BLE_STATE_MSG" object:nil];
    
    if (self.sections) {
        [self.sections removeAllObjects];
        self.sections = nil;
    }
    if (self.items) {
        [self.items removeAllObjects];
        self.items = nil;
    }
    
    if (self.position) {
        self.position = nil;
    }
    
    if (self.penColor) {
        self.penColor = nil;
    }
    
    if (debugTextView){
        [debugTextView release];
        debugTextView = nil;
    }
    
    if (mTableView){
        [mTableView release];
        mTableView = nil;
    }
    
    if (self.penController){
        self.penController = nil;
    }
    
    if (self.smProperties){
        self.smProperties = nil;
    }
    
    if(self.bleSearchController){
        self.bleSearchController = nil;
    }
    
    if(self.drawViewController){
        self.drawViewController = nil;
    }
    
    [super dealloc];
}
-(id) initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self)
    {

        
        self.sections = nil;
        self.items = nil;
        self.drawViewController = nil;
        battery[0] = -1;
        battery[1] = -1;
        self.position = @"";
        self.penColor = [UIColor blackColor];
        self.bleSearchController = nil;
    }
    return self;
}
-(void) viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    temperatureCnt = 0;
    if (self.penController) {
        [self.penController setRetObjForEnv:self];
        if (self.penController.bConnected) {
            m_penConntectedStatus = YES;
            [self ReadThreadStart];
        }
        else {
            m_penConntectedStatus = NO;
            [self ReadThreadOff];
        }
    }
    else
        m_penConntectedStatus = NO;
}

-(void) viewDidLoad {
    [super viewDidLoad];
    
    packetCnt = 0;
    errCntX = 0;
    errCntY = 0;
    
    battery[0] = -1;
    battery[1] = -1;
    smFlag = 0;
    self.smProperties = @"";
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(FreeLogMsg:) name:@"PNF_LOG_MSG" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(PenCallBackFunc:) name:@"PNF_MSG" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(BLESearchDeviceName:) name:@"BLE_SEARCH_DEVICE_NAME" object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(BLEState:) name:@"PNF_BLE_STATE_MSG" object:nil];
    
    m_penConntectedStatus = NO;
    
#if TARGET_IPHONE_SIMULATOR
    self.penController = nil;
#else
    self.penController = [[[PNFPenLibExtension alloc] init] autorelease];
    
#if TARGET_LUIDIA_EBEAMMARKER
    [self.penController setDefaultModelCode:eBeamSmartMarker];
    [self.penController setProjectiveLevel:4];
    [self.penController fixStationPosition:DIRECTION_LEFT];
#else
    [self.penController setDefaultModelCode:eBeamSmartPen];
    [self.penController setProjectiveLevel:4];
    [self.penController fixStationPosition:DIRECTION_TOP];
#endif
    [self.penController BLEInit];
    
    [self.penController setRetObjForEnv:self];
#endif
    
    self.sections = [[[NSMutableArray alloc] init] autorelease];
    
    self.items = [[[NSMutableDictionary alloc] init] autorelease];
    NSMutableArray* info = [[[NSMutableArray alloc] init] autorelease];
    [info addObject:@"ModelCode"];
    [info addObject:@"H/W Version"];
    [info addObject:@"MCU1 Version"];
    [info addObject:@"MCU2 Version"];
    [info addObject:@"RSSI"];
    NSString* sectionStr = @"H/W Info";
    [self.items setObject:info forKey:sectionStr];
    [self.sections addObject:sectionStr];
    
    info = [[[NSMutableArray alloc] init] autorelease];
    [info addObject:@"Status [1 = Down, 2 = Move, 3 = Up, 4 = Hover]"];
    [info addObject:@"Raw  Point"];
    [info addObject:@"Conv Point"];
    sectionStr = @"Status";
    [self.items setObject:info forKey:sectionStr];
    [self.sections addObject:sectionStr];
    
    info = [[[NSMutableArray alloc] init] autorelease];
    [info addObject:@"Pressure"];
    [info addObject:@"Temperaure"];
    [info addObject:@"Alive Sec"];
    sectionStr = @"Smartpen";
    [self.items setObject:info forKey:sectionStr];
    [self.sections addObject:sectionStr];
    
    info = [[[NSMutableArray alloc] init] autorelease];
    [info addObject:@"Direction"];
    [info addObject:@"Flag"];
    [info addObject:@"Audio Mode"];
    [info addObject:@"Volume"];
    [info addObject:@"Properties"];
    [info addObject:@"Connection Type"];
    sectionStr = @"Smartmarker";
    [self.items setObject:info forKey:sectionStr];
    [self.sections addObject:sectionStr];
    
    info = [[[NSMutableArray alloc] init] autorelease];
    [info addObject:@"Station"];
    [info addObject:@"Pen"];
    sectionStr = @"Battery";
    [self.items setObject:info forKey:sectionStr];
    [self.sections addObject:sectionStr];
    
    info = [[[NSMutableArray alloc] init] autorelease];
    [info addObject:@"Down, Move, Up"];
    [info addObject:@"Total"];
    [info addObject:@"Byte(Kbyte)"];
    sectionStr = @"Count";
    [self.items setObject:info forKey:sectionStr];
    [self.sections addObject:sectionStr];
    
    info = [[[NSMutableArray alloc] init] autorelease];
    [info addObject:@"Error Count (X, Y)"];
    [info addObject:@"Total"];
    sectionStr = @"Packet";
    [self.items setObject:info forKey:sectionStr];
    [self.sections addObject:sectionStr];
    
    mTableView.dataSource = self;
    mTableView.delegate = self;
    [mTableView reloadData];
}

-(void) didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - debug write
-(void) addDebugText:(NSString*)text {
    NSString* t = [NSString stringWithFormat:@"%@\n%@", debugTextView.text, text];
    [debugTextView setText:t];
    [debugTextView scrollRangeToVisible:NSMakeRange([debugTextView.text length], 0)];
}

#pragma mark - penController message
-(void) PenHandlerEnv:(NSArray*)info {
    NSLog(@"PenHandlerEnv~~");
    
    [mTableView reloadData];
}

#pragma mark - penController read pen XY data

-(void) ReadThreadOff {
    [self addDebugText:@"ReadThreadOff"];
    readThreadStop = YES;
    [NSThread sleepForTimeInterval:0.2];
    if (readThread) {
        [readThread cancel];
        [readThread release];
        readThread = nil;
    }
    if (self.penController) {
        [self.penController EndReadQ];
    }
}

-(void) ReadThreadStart {
    NSLog(@"ReadThreadStart~");
    [self addDebugText:@"ReadThreadStart"];
    if (readThread == nil) {
        readThread = [[NSThread alloc] initWithTarget:self
                                             selector:@selector(runReadThread) object:self];
        readThreadStop=NO;
        readThreadPause=NO;
        [readThread start];
        
    }
    if (self.penController) {
        [self.penController StartReadQ];
    }
}

-(void) runReadThread {
    @autoreleasepool {
        while (1) {
            if (readThreadStop) {
                break;
            }

            NSDictionary* dic = [self.penController ReadQ];
            
            if (dic == nil) {
                [self performSelector:@selector(sleepThread:) onThread:readThread withObject:[NSNumber numberWithFloat:0.02] waitUntilDone:YES];
            }
            else {
                [self performSelectorOnMainThread:@selector(PenHandlerWithDictionary:) withObject:dic waitUntilDone:YES];
                [self.penController RemoveQ];
            }
        }
    }
}

-(void)sleepThread:(NSNumber* )vv
{
    [NSThread sleepForTimeInterval:[vv floatValue]];
}

-(void) PenHandlerWithMsg:(NSNotification*) note {
    NSDictionary* dic = [note object];
    
    if ([self.penController getRetObjForEnv] != self)
        return;
    
    [self PenHandlerWithDictionary:dic];
}
-(void) PenHandlerWithDictionary:(NSDictionary*) dic {
    int PenStatus  = [[dic objectForKey:@"PenStatus"] intValue];
    CGPoint ptRaw = [[dic objectForKey:@"ptRaw"] CGPointValue];
    CGPoint ptConv = [[dic objectForKey:@"ptConv"] CGPointValue];
    int Temperature = [[dic objectForKey:@"Temperature"] intValue];
    int modelCode = [[dic objectForKey:@"modelCode"] intValue];
    int SMPenFlag = [[dic objectForKey:@"SMPenFlag"] intValue];
    int SMPenState = [[dic objectForKey:@"SMPenState"] intValue];
    int press = [[dic objectForKey:@"pressure"] intValue];
    int packetIndex = 0;
    packetIndex = [[dic objectForKey:@"packetIndex"] intValue];
    
    [self PenHandlerWithArgs:ptRaw
                      ptConv:ptConv
                   PenStatus:PenStatus
                 Temperature:Temperature
                   ModelCode:modelCode
                   SMPenFlag:SMPenFlag
                  SMPenState:SMPenState
                    Pressure:press PacketIndex:packetIndex];
}
-(void) PenHandlerWithArgs:(CGPoint) Arg_ptRaw ptConv:(CGPoint) Arg_ptConv PenStatus:(int) Arg_PenStatus
               Temperature:(int) Arg_Temperature ModelCode:(int) Arg_modelCode
                SMPenFlag :(int) Arg_SMPenFlag SMPenState:(int) Arg_SMPenState
                  Pressure:(int) Arg_pressure PacketIndex:(int) Arg_PacketIndex {
    if (Arg_PacketIndex != -1) {
        NSLog(@"savePacketIndex = %d, Arg_PacketIndex = %d", savePacketIndex, Arg_PacketIndex);
        if (savePacketIndex == -1) {
            savePacketIndex = Arg_PacketIndex;
        }
        else {
            if (savePacketIndex+1 == Arg_PacketIndex) {
                savePacketIndex = Arg_PacketIndex;
                if (savePacketIndex == 254)
                    savePacketIndex = 0;
            }
            else {
                savePacketIndex = Arg_PacketIndex;
                if (savePacketIndex == 254)
                    savePacketIndex = 0;
            }
        }
        
    }
    
    if (self.penController == nil) {
        [self addDebugText:@"self.penController is not set"];
        return;
    }
    
    packetCnt++;
    if (Arg_Temperature <= 10) {
        temperatureCnt++;
        if (temperatureCnt >= 1000) {
            temperatureCnt = 0;
            [self.view makeToast:@"Temperature Error" duration:TOAST_DURATION position:@"bottom"];
        }
    }
    else {
        temperatureCnt = 0;
    }
    self.status = Arg_PenStatus;
    self.temperature = Arg_Temperature;
    self.rawPt = Arg_ptRaw;
    self.convPt = Arg_ptConv;
    self.pressure = Arg_pressure;
    self.smFlag = (Arg_SMPenFlag & 0x01);
    switch (Arg_PenStatus) {
        case PEN_DOWN:
            NSLog(@"========================================== Donw");
            downCnt++;
            break;
        case PEN_MOVE:
            NSLog(@"******************************************* Move");
            moveCnt++;
            break;
        case PEN_UP:
            NSLog(@"******************************************* Up");
            upCnt++;
            break;
        case PEN_HOVER:
            NSLog(@"******************************************* Hovering");
            break;
        default:
            break;
    }
    
    if (self.presentedViewController != nil) {
        if ([self.presentedViewController isKindOfClass:[DrawViewController class]]) {
            BOOL erase = NO;
            BOOL big = NO;
            float eraseSize = 0.;
            if (([self.smProperties isEqualToString:@"Erase Cap"] || [self.smProperties isEqualToString:@"Erase Big"])) {
                erase = YES;
                if ([self.smProperties isEqualToString:@"Erase Big"])
                    big = YES;
                eraseSize = [self.penController calcSmartMarkerEraseThick:big];
            }
            [self.drawViewController SetDrawInfo:Arg_PenStatus pressure:Arg_pressure pt:Arg_ptConv color:self.penColor erase:erase eraseSize:eraseSize];
        }
    }
    else {
        [mTableView reloadData];
    }
}

#pragma mark - Button clicked
- (IBAction)BLEConnectClicked:(id)sender {
    if (self.bleSearchController == nil) {
        self.bleSearchController = [[[BLESearchListViewController alloc] initWithNibName:@"BLESearchListViewController" bundle:nil] autorelease];
        self.bleSearchController.delegate = self;
    }
    [self.bleSearchController.deviceList removeAllObjects];
    
    UINavigationController* nv = [[UINavigationController alloc] initWithRootViewController:self.bleSearchController];
    [nv setNavigationBarHidden:YES];
    if(IS_IPAD){
        self.bleSearchController.m_frame = CGRectMake(0, 0, 540, 568);
        nv.modalPresentationStyle = UIModalPresentationFormSheet;
        
        nv.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;
        nv.preferredContentSize = CGSizeMake(540, 568);
        //        }
        [self presentViewController:nv animated:YES completion:^{ [self.penController BLEScan]; }];
        nv.view.superview.bounds = CGRectMake(0, 0, 540, 568);
        nv.view.superview.center = self.view.center;
    }
    else{
        self.bleSearchController.m_frame = self.view.frame;
        [self presentViewController:nv animated:YES completion:^{ [self.penController BLEScan]; }];
    }
    [nv release];
}
- (IBAction)BLEDisconnectClicked:(id)sender {
    [self.penController BLEDisconnect];
}

- (IBAction)clearLog:(id)sender {
    [debugTextView setText:@""];
}

- (IBAction)calibrationClicked:(id)sender {
    if (self.penController == nil) {
        return;
    }
    if (!self.penController.bConnected) {
        UIAlertView* av = [[UIAlertView alloc] initWithTitle:@""
                                                     message:@"Connect receiver first."
                                                    delegate:nil
                                           cancelButtonTitle:@"Ok"
                                           otherButtonTitles:nil];
        [av show];
        [av release];
        return;
    }
    
    if (self.penController.modelCode == eBeamSmartMarker) {
        MarkerCalibrationViewController* cVController = [[MarkerCalibrationViewController alloc] initWithNibName:@"MarkerCalibrationViewController" bundle:nil];
        [cVController setModalTransitionStyle:UIModalTransitionStyleCrossDissolve];
        [cVController SetPenController:self.penController];
        cVController.delegate = self;
        [self presentViewController:cVController animated:NO completion:^{
            [cVController release];
        }];
    }else{
        //modelCode == eBeamSmartPen
        PenCalibrationViewController* cVController = [[PenCalibrationViewController alloc] initWithNibName:@"PenCalibrationViewController" bundle:nil];
        [cVController setModalTransitionStyle:UIModalTransitionStyleCrossDissolve];
        [cVController SetPenController:self.penController];
        cVController.delegate = self;
        [self presentViewController:cVController animated:NO completion:^{
            [cVController release];
        }];
    }
}

- (IBAction)changeNameClicked:(id)sender {
    if (self.penController == nil) {
        return;
    }
    
    if (!self.penController.bConnected) {
        UIAlertView* av = [[UIAlertView alloc] initWithTitle:@""
                                                     message:@"Connect receiver first."
                                                    delegate:nil
                                           cancelButtonTitle:@"Ok"
                                           otherButtonTitles:nil];
        [av show];
        [av release];
        return;
    }
    
    BTNameChangeViewController* cVController = [[BTNameChangeViewController alloc] initWithNibName:@"BTNameChangeViewController" bundle:nil];
    [cVController setModalTransitionStyle:UIModalTransitionStyleCrossDissolve];
    [cVController SetPenController:self.penController];
    cVController.delegate = self;
    [self presentViewController:cVController animated:NO completion:^{
        [cVController release];
    }];
}

-(IBAction)drawingClicked:(id)sender {
    NSString* xibName = @"DrawViewController";
    if (IS_IPAD)
        xibName = @"DrawViewController_iPad";
    
    self.drawViewController = [[[DrawViewController alloc] initWithNibName:xibName bundle:nil] autorelease];
    self.drawViewController.delegate = self;
    [self.drawViewController setModalTransitionStyle:UIModalTransitionStyleCrossDissolve];
    [self presentViewController:self.drawViewController animated:YES completion:^{
        CGSize drawingSize = [self GetDrawingSizeByCalibration];
        [self.drawViewController changeResolution:drawingSize];
    }];
}

-(IBAction)stopPenClicked:(id)sender {
    if (self.penController) {
        [self.penController stopPen];
    }
}

-(IBAction)reStartPenClicked:(id)sender {
    if (self.penController) {
        [self.penController restartPen];
    }
}

-(void) audioModeChanged:(id)sender {
    if (self.penController.bConnected) {
        if(self.penController.modelCode == eBeamSmartMarker){
            UISegmentedControl* s = (UISegmentedControl*)sender;
            [self.penController changeAudioMode:s.selectedSegmentIndex==0?NO:YES];
        }
    }
}

-(void) volumeChanged:(id)sender {
    if (self.penController.bConnected) {
        if(self.penController.modelCode == eBeamSmartMarker){
            UISlider* s = (UISlider*)sender;
            int value = AUDIO_DEV_MAX-(int)s.value;
            [self.penController changeVolume:value];
        }
    }
}

-(void) clearClicked:(id)sender {
    UIButton* btn = (UIButton*)sender;
    if (btn.tag == 4) {
        downCnt = 0;
        moveCnt= 0;
        upCnt = 0;
        [mTableView reloadData];
    }
    else if (btn.tag == 5) {
        packetCnt = 0;
        errCntX = 0;
        errCntY = 0;
        
        [mTableView reloadData];
    }
}

#pragma mark - Bluetooth
-(void) BLEState:(NSNotification *) obj {
    CBCentralManager * central = (CBCentralManager *) [obj object];
    switch (central.state) {
        case CBCentralManagerStateUnknown:
            NSLog(@"State unknown, update imminent.");
            break;
        case CBCentralManagerStateResetting:
            NSLog(@"The connection with the system service was momentarily lost, update imminent.");
            break;
        case CBCentralManagerStateUnsupported:
            NSLog(@"The platform doesn’t support Bluetooth Low Energy.");
            break;
        case CBCentralManagerStateUnauthorized:
            NSLog(@"The app is not authorized to use Bluetooth Low Energy.");
            break;
        case CBCentralManagerStatePoweredOff:
            NSLog(@"Bluetooth is currently powered off.");
            break;
        case CBCentralManagerStatePoweredOn:
            NSLog(@"Bluetooth is currently powered on and available to use.");
            break;
        default:
            break;
    }
}
-(void) BLESearchDeviceName:(NSNotification *) obj {
    NSMutableDictionary * bleObj = (NSMutableDictionary *) [obj object];
    if (self.bleSearchController) {
//        CBPeripheral* peripheral = [bleObj objectForKey:@"peripheral"];
//        if([peripheral.name containsString:@"eSM"] || [peripheral.name containsString:@"eBP"])
        {
            [self.bleSearchController.deviceList addObject:bleObj];
            [self.bleSearchController refresh];
        }
    }
}

-(void) FreeLogMsg:(NSNotification *) note {
    NSString * szS = (NSString *) [note object];
    NSLog(@"FreeLogMsg szS==>[%@]", szS);
    if ([szS compare:@"FAIL_LISTENING"] == 0 ) {
        
    }
    else if ([szS isEqualToString:@"CONNECTED"]) {
        [self addDebugText:szS];
        penErrorCnt = 0;
        
        savePacketIndex = -1;
    }
    else if ([szS isEqualToString:@"INVALID_PROTOCOL"]) {
        return;
    }
    else if ([szS isEqualToString:@"UPDATE_BLE_RSSI"]) {
        self.RSSIValue = penController.RSSI;
        return;
    }
    else if ([szS isEqualToString:@"SESSION_CLOSED"]) {
        savePacketIndex = -1;
        [self addDebugText:szS];
        
        [self ReadThreadOff];
        self.position = @"";
        self.smProperties = @"";
        self.penColor = [UIColor blackColor];
    }
    else if ([szS isEqualToString:@"PEN_RMD_ERROR"]) {
        if (self.penController && (self.penController.PenStatus == PEN_DOWN || self.penController.PenStatus == PEN_MOVE)) {
            penErrorCnt++;
            if (penErrorCnt > 5) {
                [self.view makeToast:@"RMD_ERROR" duration:TOAST_DURATION position:@"bottom"];
                penErrorCnt = 0;
            }
        }
        return;
    }
    else if ([szS isEqualToString:@"FIRST_DATA_RECV"]) {
        [self addDebugText:szS];
        
        [self ReadThreadStart];
        
        CGSize drawingSize = [self GetDrawingSizeByCalibration];
        [self.penController setCalibration:scaleRect(CGRectMake(0, 0, drawingSize.width, drawingSize.height)) GuideMargin:0];
    }
    
    packetCnt++;
    [mTableView reloadData];
}

-(void) PenCallBackFunc:(NSNotification *)call {
    NSString * szS = (NSString *) [call object];
    NSLog(@"PenCallBackFunc szS==>%@",szS);
    
    if([szS isEqualToString:@"BATTERY_INFO"]) {
        battery[0] = self.penController.battery_station;
        battery[1] = self.penController.battery_pen;
        [mTableView reloadData];
    }
    else if([szS isEqualToString:@"NEW_PAGE"] || [szS isEqualToString:@"DUPLICATE_PAGE"]) {
        [self addDebugText:szS];
    }
    else if ([szS isEqualToString:@"CHANGE_DEVECE_POSITION"] || [szS isEqualToString:@"CHANGE_DEVECE_POSITION_FIRST"]) {
        if (self.penController.StationPosition == DIRECTION_LEFT)
            self.position = @"Left";
        else if (self.penController.StationPosition == DIRECTION_RIGHT)
            self.position = @"Right";
        else if (self.penController.StationPosition == DIRECTION_TOP)
            self.position = @"Top";
        else if (self.penController.StationPosition == DIRECTION_BOTTOM)
            self.position = @"Bottom";
        else
            self.position = @"Both";
        
        [mTableView reloadData];
    }
}
-(void) setPenPropertiesForSM:(int)Arg_SMPenState {
    switch (Arg_SMPenState) {
        case 0x51: // red marker
            self.smProperties = @"Red";
            self.penColor = [UIColor colorWithRed:1.0 green:0 blue:0 alpha:1];
            break;
        case 0x52: // green marker
            self.smProperties = @"Green";
            self.penColor = [UIColor colorWithRed:60.0/255.0 green:184.0/255.0 blue:120.0/255.0 alpha:1];
            break;
        case 0x53:
            self.smProperties = @"Yellow";
            self.penColor = [UIColor colorWithRed:1.0 green:1.0 blue:0 alpha:1];
            break;
        case 0x54:
            self.smProperties = @"Blue";
            self.penColor = [UIColor colorWithRed:0 green:0 blue:1.0 alpha:1];
            break;
        case 0x56:
            self.smProperties = @"Violet";
            self.penColor = [UIColor colorWithRed:128.0/255.0 green:0 blue:128.0/255.0 alpha:1];
            break;
        case 0x58:
            self.smProperties = @"Black";
            self.penColor = [UIColor colorWithRed:0 green:0 blue:0 alpha:1];
            break;
        case 0x59:  // eraser cap
            self.smProperties = @"Erase Cap";
            self.penColor = [UIColor whiteColor];
            break;
        case 0x50:
        case 0x5C:  // big eraser
            self.smProperties = @"Erase Big";
            self.penColor = [UIColor whiteColor];
            break;
        default:
            break;
    }
}

#pragma mark TableView
-(CGFloat) tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {
    return 40;
}

-(UIView *) tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {
    UIView* headerView = [[[UIImageView alloc]initWithFrame:CGRectMake(0, 0, tableView.frame.size.width, 44)]autorelease];
    UILabel* hLabel = [[[UILabel alloc]initWithFrame:CGRectMake(15, 20, tableView.frame.size.width, 22)]autorelease];
    hLabel.backgroundColor = [UIColor clearColor];
    hLabel.font = [UIFont fontWithName:@"Helvetica-Bold" size:17];
    hLabel.text = [self.sections objectAtIndex:section];
    [headerView addSubview:hLabel];
    if (section == 5 || section == 6) {
        [headerView setUserInteractionEnabled:YES];
        UIButton *clearBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        [clearBtn setUserInteractionEnabled:YES];
        clearBtn.frame = CGRectMake(tableView.frame.size.width-80, 20, 80, 22);
        [clearBtn setTitle:@"Clear" forState:UIControlStateNormal];
        clearBtn.titleLabel.font = [UIFont fontWithName:@"HelveticaNeue" size:14];
        clearBtn.backgroundColor = [UIColor clearColor];
        [clearBtn setTitleColor:[UIColor blueColor] forState:UIControlStateNormal];
        clearBtn.titleLabel.textAlignment = NSTextAlignmentLeft;
        clearBtn.tag = section;
        [clearBtn addTarget:self action:@selector(clearClicked:) forControlEvents:UIControlEventTouchUpInside];
        [headerView addSubview:clearBtn];
    }
    return headerView;
}

-(NSInteger) numberOfSectionsInTableView:(UITableView *)tableView {
    return self.items.count;
}

-(NSInteger) tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return [[self.items objectForKey:[self.sections objectAtIndex:section]] count];
}

-(UITableViewCell *) tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    NSString *CellIdentifier = [NSString stringWithFormat:@"Cell%d%d", (int)indexPath.section, (int)indexPath.row];
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:CellIdentifier]autorelease];
    }
    [[cell.contentView subviews] makeObjectsPerformSelector:@selector(removeFromSuperview)];
    cell.backgroundColor = [UIColor whiteColor];
    cell.textLabel.font = [UIFont fontWithName:@"Helvetica-Light" size:p(10, 14)];
    cell.textLabel.text =
    (NSString*)[[self.items objectForKey:[self.sections objectAtIndex:indexPath.section]] objectAtIndex:indexPath.row];
    cell.detailTextLabel.font = [UIFont fontWithName:@"Helvetica-Light" size:p(10, 14)];
    cell.accessoryType = UITableViewCellAccessoryNone;
    
    switch (indexPath.section) {
        case 0: {
            switch (indexPath.row) {
                case 0: { [cell.detailTextLabel setText:self.penController.bConnected?[NSString stringWithFormat:@"%d", self.penController.modelCode]:@""]; break; }
                case 1: { [cell.detailTextLabel setText:self.penController.bConnected?[NSString stringWithFormat:@"%d", self.penController.HWVersion]:@""]; break; }
                case 2: { [cell.detailTextLabel setText:self.penController.bConnected?[NSString stringWithFormat:@"%d", self.penController.MCU1Version]:@""]; break; }
                case 3: { [cell.detailTextLabel setText:self.penController.bConnected?[NSString stringWithFormat:@"%d", self.penController.MCU2Version]:@""]; break; }
                case 4: { [cell.detailTextLabel setText:self.penController.bConnected?[NSString stringWithFormat:@"%d", self.penController.RSSI]:@""]; break; }
                default:
                    break;
            }
            break;
        }
        case 1: {
            switch (indexPath.row) {
                case 0: { [cell.detailTextLabel setText:self.penController.bConnected?[NSString stringWithFormat:@"%d", self.status]:@""]; break; }
                case 1: { [cell.detailTextLabel setText:self.penController.bConnected?NSStringFromCGPoint(self.rawPt):@""]; break; }
                case 2: {
                    NSString* str = [NSString stringWithFormat:@"{%.3f, %.3f}", self.convPt.x, self.convPt.y];
                    [cell.detailTextLabel setText:self.penController.bConnected?str:@""]; break;
                }
                default:
                    break;
            }
            break;
        }
        case 2: {
            switch (indexPath.row) {
                case 0: { [cell.detailTextLabel setText:self.penController.bConnected?[NSString stringWithFormat:@"%d", self.pressure]:@""]; break; }
                case 1: { [cell.detailTextLabel setText:self.penController.bConnected?[NSString stringWithFormat:@"%d", self.temperature]:@""]; break; }
                case 2: { [cell.detailTextLabel setText:self.penController.bConnected?[NSString stringWithFormat:@"%d", 0]:@""]; break; }
                default:
                    break;
            }
            break;
        }
        case 3: {
            if (self.penController.bConnected) {
                if(self.penController.modelCode == eBeamSmartMarker){
                    switch (indexPath.row) {
                        case 0: { [cell.detailTextLabel setText:self.position]; break; }
                        case 1: {
                            [cell.detailTextLabel setText:self.smFlag?@"Right":@"Left"];
                            break;
                        }
                        case 2: {
                            UISegmentedControl* seg = [[[UISegmentedControl alloc] initWithItems:[NSArray arrayWithObjects:@"Beep",
                                                                                                  @"Beep&Audio", nil]] autorelease];
                            if (!(IS_IPAD)) {
                                [seg setWidth:100 forSegmentAtIndex:0];
                                [seg setWidth:100 forSegmentAtIndex:1];
                            }
                            if (self.penController.AudioMode)
                                [seg setSelectedSegmentIndex:1];
                            else
                                [seg setSelectedSegmentIndex:0];
                            [seg addTarget:self action:@selector(audioModeChanged:) forControlEvents:UIControlEventValueChanged];
                            cell.accessoryView = seg;
                            break;
                        }
                        case 3: {
                            UISlider* si = [[[UISlider alloc] initWithFrame:CGRectMake(0, 0, 150, 21)] autorelease];
                            [si setMinimumValue:0];
                            [si setMaximumValue:AUDIO_USR_MAX];
                            int value = AUDIO_DEV_MAX-(int)self.penController.Volume;
                            if (value > AUDIO_USR_MAX) {
                                value = AUDIO_USR_MAX;
                                [self.penController changeVolume:AUDIO_DEV_MAX-AUDIO_USR_MAX];
                            }
                            [si setValue:value animated:NO];
                            [si addTarget:self action:@selector(volumeChanged:) forControlEvents:UIControlEventTouchUpInside];
                            [si addTarget:self action:@selector(volumeChanged:) forControlEvents:UIControlEventTouchUpOutside];
                            cell.accessoryView = si;
                            break;
                        }
                        case 4: { [cell.detailTextLabel setText:self.smProperties]; break; }
                        default:
                            break;
                    }
                }
            }
            else {
                switch (indexPath.row) {
                    case 0: { [cell.detailTextLabel setText:@""]; break; }
                    case 1: { [cell.detailTextLabel setText:@""]; break; }
                    case 2: {
                        cell.accessoryView = nil;
                        break;
                    }
                    case 3: {
                        cell.accessoryView = nil;
                        break;
                    }
                    case 4: { [cell.detailTextLabel setText:@""]; break; }
                    default:
                        break;
                }
            }
            break;
        }
        case 4: {
            if (self.penController.bConnected) {
                if(self.penController.modelCode == eBeamSmartMarker || self.penController.modelCode == eBeamSmartPen){
                    switch (indexPath.row) {
                        case 0: {
                            if (battery[0] == -1){
                                [cell.detailTextLabel setText:@"No Data"];
                            }else{
                                [cell.detailTextLabel setText:[NSString stringWithFormat:@"%d%%", battery[0]]];
                            }
                            break;
                        }
                        case 1: {
                            if (self.penController.modelCode == eBeamSmartMarker) {
                                if (battery[1] == -1){
                                    [cell.detailTextLabel setText:@"No Data"];
                                }else{
                                    [cell.detailTextLabel setText:[NSString stringWithFormat:@"%@", battery[1]?@"LOW":@"HIGH"]];
                                }
                            }else{
                                //modelCode == eBeamSmartPen
                                if (battery[1] == -1){
                                    [cell.detailTextLabel setText:@"No Data"];
                                }else{
                                    [cell.detailTextLabel setText:[NSString stringWithFormat:@"%d%%", battery[1]]];
                                }
                            }
                            
                            break;
                        }
                        default:
                            break;
                    }
                }
            }
            else {
                [cell.detailTextLabel setText:@""];
            }
            break;
        }
        case 5: {
            if (self.penController.bConnected) {
                float byte = ((downCnt+moveCnt+upCnt)*6)+((downCnt+moveCnt+upCnt)/12)+1;
                switch (indexPath.row) {
                    case 0: { [cell.detailTextLabel setText:[NSString stringWithFormat:@"{%d, %d, %d}", downCnt, moveCnt, upCnt]]; break; }
                    case 1: { [cell.detailTextLabel setText:[NSString stringWithFormat:@"%d", downCnt+moveCnt+upCnt]]; break; }
                    case 2: { [cell.detailTextLabel setText:[NSString stringWithFormat:@"%d Byte(%.3f Kb)", (int)byte, byte/1024.f]]; break; }
                    default:
                        break;
                }
            }
            else {
                switch (indexPath.row) {
                    case 0: { [cell.detailTextLabel setText:@""]; break; }
                    case 1: { [cell.detailTextLabel setText:@""]; break; }
                    case 2: { [cell.detailTextLabel setText:@""]; break; }
                    default:
                        break;
                }
            }
            break;
        }
        case 6: {
            if (self.penController.bConnected) {
                switch (indexPath.row) {
                    case 0: { [cell.detailTextLabel setText:[NSString stringWithFormat:@"{%d, %d}", errCntX, errCntY]]; break; }
                    case 1: { [cell.detailTextLabel setText:[NSString stringWithFormat:@"%d", packetCnt]]; break; }
                    default:
                        break;
                }
            }
            else {
                switch (indexPath.row) {
                    case 0: { [cell.detailTextLabel setText:@""]; break; }
                    case 1: { [cell.detailTextLabel setText:@""]; break; }
                    default:
                        break;
                }
            }
            break;
        }
        default: {
            cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
            break;
        }
    }
    return cell;
}

-(void) tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
}

-(CGSize) GetDrawingSizeByCalibration {
    if (self.penController.bConnected) {
        CGSize caliSize = [self.penController getCalibrationSize];
        float calcW = 0.;
        float calcH = 0.;
        
        float w = caliSize.width;
        float h = caliSize.height;
        calcW = self.view.frame.size.width;
        calcH = (int)((h*self.view.frame.size.width)/w);
        if (calcH > self.view.frame.size.height) {
            calcH = self.view.frame.size.height;
            calcW = (int)((w*self.view.frame.size.height)/h);
        }
        
        return CGSizeMake(calcW, calcH);
    }
    
    return CGSizeMake(self.view.frame.size.width, self.view.frame.size.height);
}

#pragma mark - BLESearchListViewControllerDelegate
-(void) closeBLESearchListViewController {
    [self.penController BLEScanStop];
    [self.bleSearchController dismissViewControllerAnimated:YES completion:^{
        self.bleSearchController = nil;
    }];
}
-(void) selectBLEDevice:(CBPeripheral *)peripheral {
    [self.penController BLEConnect:peripheral];
    [self closeBLESearchListViewController];
}

#pragma mark - MarkerCalibrationViewControllerDelegate
-(void) closeMarkerCalibrationViewController {
    if (self.penController.StationPosition == DIRECTION_LEFT)
        self.position = @"Left";
    else if (self.penController.StationPosition == DIRECTION_RIGHT)
        self.position = @"Right";
    else if (self.penController.StationPosition == DIRECTION_TOP)
        self.position = @"Top";
    else if (self.penController.StationPosition == DIRECTION_BOTTOM)
        self.position = @"Bottom";
    else
        self.position = @"Both";
    
    [mTableView reloadData];
}

-(void) successMarkerCalibrationViewController {
    CGSize drawingSize = [self GetDrawingSizeByCalibration];
    [self.penController setCalibration:scaleRect(CGRectMake(0, 0, drawingSize.width, drawingSize.height)) GuideMargin:0];
    
    if (self.penController.StationPosition == DIRECTION_LEFT)
        self.position = @"Left";
    else if (self.penController.StationPosition == DIRECTION_RIGHT)
        self.position = @"Right";
    else if (self.penController.StationPosition == DIRECTION_TOP)
        self.position = @"Top";
    else if (self.penController.StationPosition == DIRECTION_BOTTOM)
        self.position = @"Bottom";
    else
        self.position = @"Both";
    
    [mTableView reloadData];
}

#pragma mark - PenCalibrationViewControllerDelegate
-(void) closePenCalibrationViewController {
    [mTableView reloadData];
}

-(void) successPenCalibrationViewController {
    CGSize drawingSize = [self GetDrawingSizeByCalibration];
    [self.penController setCalibration:scaleRect(CGRectMake(0, 0, drawingSize.width, drawingSize.height)) GuideMargin:0];
    
    [mTableView reloadData];
}

#pragma mark - BTNameChangeViewControllerDelegate
-(void) closeBTNameChangeViewController {
    
}
-(void) successBTNameChangeViewController {
    [mTableView reloadData];
}

#pragma mark - DrawViewControllerDelegate
-(void) closeDrawViewController {
    [self.drawViewController dismissViewControllerAnimated:YES completion:^{
        self.drawViewController = nil;
    }];
}

- (void)navigationController:(UINavigationController *)navigationController
      willShowViewController:(UIViewController *)viewController
                    animated:(BOOL)animated {
    [[UIApplication sharedApplication] setStatusBarHidden:YES];
}

-(BOOL) shouldAutoRotate {
    return YES;
}
-(UIInterfaceOrientationMask)supportedInterfaceOrientations {
    return UIInterfaceOrientationMaskPortrait|UIInterfaceOrientationMaskPortraitUpsideDown;
}
@end
