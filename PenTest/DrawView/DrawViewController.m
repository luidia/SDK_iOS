//
//  DrawViewController.m
//  iPhoneTest
//
//  Created by Luidia on 2018. 05. 04..
//  Copyright © 2018년 choi. All rights reserved.
//

#import "DrawViewController.h"
#import "PNFPenLibExtension.h"
#import "DrawView.h"
#import "PNFStrokePoint.h"

@interface DrawViewController ()
{
    IBOutlet DrawView *drawView;
}
- (IBAction)closeClicked:(id)sender;
- (IBAction)clearAllClicked:(id)sender;
@end

@implementation DrawViewController
@synthesize penController;
@synthesize calibrationRect;
@synthesize calibrationSize;
@synthesize delegate;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        delegate = nil;
    }
    return self;
}
-(CGSize) GetDefaultSizeByPaper:(int) nPaper
{
    CGSize defaultSize = CGSizeZero;
    switch (nPaper) {
        case  Letter:
        {
            defaultSize = CGSizeMake(216, 279);
        }
            break;
        case A4:
        {
            defaultSize = CGSizeMake(210, 297);
        }
            break;
        case  A5:
        {
            defaultSize = CGSizeMake(148, 210);
        }
            break;
        case B5:
        {
            defaultSize = CGSizeMake(176, 250);
        }
            break;
            
        case B6:
        {
            defaultSize = CGSizeMake(125, 175);
        }
            break;
            
        case FT6X4:
        {
            // TODO:: marker
            defaultSize = CGSizeMake(1828, 1219);
        }
            break;
            
        case FT6X5:
        {
            // TODO:: marker
            defaultSize = CGSizeMake(1828, 1524);
        }
            break;
        case FT8X4:
        {
            // TODO:: marker
            defaultSize = CGSizeMake(2438, 1219);
        }
            break;
        case FT8X5:
        {
            // TODO:: marker
            defaultSize = CGSizeMake(2438, 1524);
        }
            break;
        case FT3X5:
        {
            // TODO:: marker
            defaultSize = CGSizeMake(914, 1524);
        }
            break;
        case FT3X6:
        {
            // TODO:: marker
            defaultSize = CGSizeMake(914, 1828);
        }
            break;
        case FT4X6:
        {
            // TODO:: marker
            defaultSize = CGSizeMake(1219, 1828);
        }
            break;
        case FT3X5_BOTTOM:
        {
            // TODO:: marker
            defaultSize = CGSizeMake(914, 1524);
        }
            break;
        case FT3X6_BOTTOM:
        {
            // TODO:: marker
            defaultSize = CGSizeMake(914, 1828);
        }
            break;
        case FT4X6_BOTTOM:
        {
            // TODO:: marker
            defaultSize = CGSizeMake(1219, 1828);
        }
            break;
        default:
            NSLog(@"%d is not define size",nPaper);
            break;
    }
    return defaultSize;
    
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    [self.view setFrame:[[UIScreen mainScreen] bounds]];
    
    drawView.autoresizingMask = UIViewAutoresizingFlexibleLeftMargin|
    UIViewAutoresizingFlexibleWidth|
    UIViewAutoresizingFlexibleRightMargin|
    UIViewAutoresizingFlexibleBottomMargin;
    
    if (self.penController.bConnected) {
        switch (self.penController.modelCode) {
            case SmartPen: {
                [drawView setFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height)];
                break;
            }
            case LolLolPen: {
                [drawView setFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height)];
                break;
            }
            default: {
                CGPoint whiteSpaceOffset = CGPointZero;
                BOOL LandscapeMode = NO;
                float calcW = 0.;
                float calcH = 0.;
                if (self.calibrationSize == Custom) {
                    whiteSpaceOffset = CGPointZero;
                    float w = self.calibrationRect.size.width;
                    float h = self.calibrationRect.size.height;
                    calcW = self.view.frame.size.width;
                    calcH = (int)((h*self.view.frame.size.width)/w);
                    if (calcH > self.view.frame.size.height) {
                        calcH = self.view.frame.size.height;
                        calcW = (int)((w*self.view.frame.size.height)/h);
                    }
                }
                else {
                    CGSize defaultSize = CGSizeZero;
                    defaultSize = [self GetDefaultSizeByPaper:self.calibrationSize];
                    
                    switch (self.calibrationSize) {
                        case FT6X4:
                        case FT6X5:
                        case FT8X4:
                        case FT8X5:
                            LandscapeMode = YES;
                            break;
                        default:
                            LandscapeMode = NO;
                            break;
                    }
                    
                    float w = defaultSize.width;
                    float h = defaultSize.height;
                    calcW = self.view.frame.size.width;
                    calcH = (int)((h*self.view.frame.size.width)/w);
                    if (calcH > self.view.frame.size.height) {
                        calcH = self.view.frame.size.height;
                        calcW = (int)((w*self.view.frame.size.height)/h);
                    }
                    float ratio = self.calibrationRect.size.height/self.calibrationRect.size.width;
                    whiteSpaceOffset = CGPointMake(0, calcH-(int)(calcW*ratio));
                    calcH = calcH-whiteSpaceOffset.y;
                    
                    if (LandscapeMode) {
                        w = defaultSize.width;
                        h = defaultSize.height;
                        calcW = (int)((w*self.view.bounds.size.height)/h);
                        calcH = self.view.bounds.size.height;
                        
                        if (calcW > self.view.frame.size.width) {
                            calcW = self.view.frame.size.width;
                            calcH = (int)((h*self.view.frame.size.width)/w);
                        }
                        float ratio = self.calibrationRect.size.width/self.calibrationRect.size.height;
                        whiteSpaceOffset = CGPointMake(calcW-(int)(calcH*ratio), 0);
                        calcW = calcW-whiteSpaceOffset.x;
                    }
                }
                if (LandscapeMode) {
                    [drawView setFrame:CGRectMake(0, 0, calcW+whiteSpaceOffset.x, calcH)];
                }
                else {
                    [drawView setFrame:CGRectMake(0, 0, calcW, calcH+whiteSpaceOffset.y)];
                }
                drawView.center = self.view.center;
                NSLog(@"DrawView Size = %@", NSStringFromCGRect(drawView.frame));
                CGPoint calResultPoint[4];
                calResultPoint[0] = CGPointMake(self.calibrationRect.origin.x, self.calibrationRect.origin.y);
                calResultPoint[1] = CGPointMake(self.calibrationRect.origin.x, self.calibrationRect.origin.y+self.calibrationRect.size.height);
                calResultPoint[2] = CGPointMake(self.calibrationRect.origin.x+self.calibrationRect.size.width,
                                                self.calibrationRect.origin.y+self.calibrationRect.size.height);
                calResultPoint[3] = CGPointMake(self.calibrationRect.origin.x+self.calibrationRect.size.width,
                                                self.calibrationRect.origin.y);
                [self.penController setProjectiveLevel:4];
                if (LandscapeMode) {
                    [self.penController setCalibrationData:scaleRect(CGRectMake(0, 0, drawView.bounds.size.width-whiteSpaceOffset.x, drawView.bounds.size.height))
                                          GuideMargin:0
                                           CalibPoint:calResultPoint];
                }
                else {
                    [self.penController setCalibrationData:scaleRect(CGRectMake(0, 0, drawView.bounds.size.width, drawView.bounds.size.height-whiteSpaceOffset.y))
                                          GuideMargin:0
                                           CalibPoint:calResultPoint];
                }
                break;
            }
        }
    }
    else {
        [drawView setFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height)];
    }
    [drawView changeDrawingSize];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (BOOL) shouldAutoRotate{
    return YES;
}

- (UIInterfaceOrientationMask)supportedInterfaceOrientations {
    return UIInterfaceOrientationMaskPortrait|UIInterfaceOrientationMaskPortraitUpsideDown;
}
-(void) SetDrawInfo:(int)status pressure:(int)pressure pt:(CGPoint)pt color:(UIColor*)color erase:(BOOL)erase eraseSize:(float)eraseSize {
    [drawView DoPenProcess:status pressure:pressure X:pt.x Y:pt.y color:color erase:erase eraseSize:eraseSize];
}
- (void)dealloc {
    if (drawView){
        [drawView release];
        drawView = nil;
    }
    
    [super dealloc];
}

- (IBAction)closeClicked:(id)sender {
    if (delegate) {
        if ([self.delegate respondsToSelector:@selector(closeDrawViewController)]) {
            [self.delegate closeDrawViewController];
        }
    }
    else {
        [self dismissViewControllerAnimated:YES completion:^{
            
        }];
    }
}
- (IBAction)clearAllClicked:(id)sender {
    [drawView clear];
}
@end
